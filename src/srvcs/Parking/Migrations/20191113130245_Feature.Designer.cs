// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parking.API.Context;

namespace Parking.Migrations
{
    [DbContext(typeof(ParkingContext))]
    [Migration("20191113130245_Feature")]
    partial class Feature
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("Parking")
                .HasAnnotation("ProductVersion", "2.2.0-rtm-35687")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Models.Car", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreateAt");

                    b.Property<string>("Folder");

                    b.Property<string>("ModelId")
                        .IsRequired();

                    b.Property<string>("TypeId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ModelId");

                    b.HasIndex("TypeId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("Core.Models.Manufacturer", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreateAt");

                    b.Property<string>("Name")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Manufacturers");
                });

            modelBuilder.Entity("Core.Models.Model", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreateAt");

                    b.Property<string>("ManufacturerId")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<int>("Year");

                    b.HasKey("Id");

                    b.HasIndex("ManufacturerId");

                    b.ToTable("Models");
                });

            modelBuilder.Entity("Core.Models.ParkedCar", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CarId");

                    b.Property<DateTimeOffset>("CreateAt");

                    b.Property<string>("SlotId");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("SlotId");

                    b.ToTable("Parked");
                });

            modelBuilder.Entity("Core.Models.Slot", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreateAt");

                    b.Property<double>("DistDoor");

                    b.Property<bool>("IsBusy");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd();

                    b.HasKey("Id");

                    b.ToTable("Slots");
                });

            modelBuilder.Entity("Core.Models.SlotType", b =>
                {
                    b.Property<string>("SlotId");

                    b.Property<string>("TypeId");

                    b.HasKey("SlotId", "TypeId");

                    b.HasIndex("TypeId");

                    b.ToTable("SlotTypes");
                });

            modelBuilder.Entity("Core.Models.Type", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTimeOffset>("CreateAt");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Types");
                });

            modelBuilder.Entity("Core.Models.Car", b =>
                {
                    b.HasOne("Core.Models.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.Model", b =>
                {
                    b.HasOne("Core.Models.Manufacturer", "Manufacturer")
                        .WithMany()
                        .HasForeignKey("ManufacturerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Core.Models.ParkedCar", b =>
                {
                    b.HasOne("Core.Models.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId");

                    b.HasOne("Core.Models.Slot", "Slot")
                        .WithMany()
                        .HasForeignKey("SlotId");
                });

            modelBuilder.Entity("Core.Models.SlotType", b =>
                {
                    b.HasOne("Core.Models.Slot", "Slot")
                        .WithMany("Types")
                        .HasForeignKey("SlotId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Core.Models.Type", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
