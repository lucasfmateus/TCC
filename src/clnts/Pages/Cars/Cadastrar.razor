@page "/cadastrar"
@inject ParkedController parkingService
@inject ClassificationController classificationService

<div class="row">

    <div>
        <h1>Alocar Veiculo</h1>

        <p>Selecione a imagem do veiculo que deseja identificar.</p>

        <InputFile OnChange="HandleSelection" />


        <p>@status</p>
    </div>

    <div class="row">
        <div class="col-md-6">

            @if (!String.IsNullOrEmpty(imageData))
            {
                <img src="@imageData" height="250" />
            }
        </div>

        <div class="col">
            @if (registred == null)
            {

            }
            else
            {
                <p>
                    <label>Fabricante: </label>
                    <label>@registred.Model.Manufacturer.Name</label>
                </p>

                <p>
                    <label>Modelo: </label>
                    <label> @registred.Model.Name </label>
                </p>

                <p>
                    <label>Ano: </label>
                    <label> @registred.Model.Year </label>
                </p>

                <p>
                    <label>Tipo: </label>
                    <label> @registred.Type.Name </label>
                </p>


                <button @onclick="AlocateNewCar" type="submit">Alocar carro</button>
            }

            @if (result == "")
            {

            }
            else
            {
                <p>@result</p>
            }
        </div>
    </div>



</div>

@code {
    string status;

    string imageData = String.Empty;

    string result = String.Empty;

    public Car registred;

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        var ms = new MemoryStream();

        if (file != null)
        {

            await file.Data.CopyToAsync(ms);

            status = $"Upload concluido, {file.Size} bytes.s";

            imageData = $"data:image/jpg;base64,{Convert.ToBase64String(ms.ToArray())}";
        }

        registred = await classificationService.GetCassification(imageData);
    }

    //Aloca um carro no estacionamento
    public async Task AlocateNewCar()
    {
        if (registred.Model != null && registred.Type != null)
        {
            var x = await parkingService.NewParkedAsync(registred);

            if (x != null)
            {
                result = ("Veículo alocado na vaga: Nome: " + x.Name + " | Distância da porta: " + x.DistDoor);
            }
            else
            {
                result = "Erro ao realizar alocação do veículo.";
            }
        }
    }

}