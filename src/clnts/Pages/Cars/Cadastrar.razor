@page "/cadastrar"
@inject ParkedController parkingService
@inject ClassificationController classificationService
    
<div class="row">
    
    <div>
        <h1>Alocar Veiculo</h1>

        <p>Selecione a imagem do veiculo que deseja identificar.</p>

        <InputFile OnChange="HandleSelection" />


        <p>@status</p>
    </div>    

    <div class="row">
        <div class="col">

            @if (!String.IsNullOrEmpty(imageData))
            {
                <img src="@imageData" height="250" />
            }


        </div>

        <div class="col">
            @if (registred == null)
            {

            }
            else
            {
                <p>
                    <label>Fabricante: </label>
                    <label>@registred.Model.Manufacturer.Name</label>
                </p>

                <p>
                    <label>Modelo: </label>
                    <label> @registred.Key.Model.Name </label/>
                </p>

                <p>
                    <label>Ano: </label>
                    <label> @registred.Key.Model.Year </label/>
                </p>

                <p>
                    <label>Tipo: </label>
                    <label> @registred.Key.Type.Name </label/>
                </p>

                <p>
                    <label>Precisão: </label>
                    <label> @registred.Value </label/>
                </p>

                <button @onclick="AlocateNewCar" type="submit">Alocar carro</button>
            }

            @if(result == "")
            {

            }
            else
            {
                <p>@result</p>
            }
        </div>
    </div>


    
</div>

@code {
    string status;

    string imageData = String.Empty;

    string result = String.Empty;

    public KeyValuePair<Car, decimal> registred;

    async Task HandleSelection(IFileListEntry[] files)
    {
        var file = files.FirstOrDefault();

        if (file != null)
        {
            var ms = new MemoryStream();

            await file.Data.CopyToAsync(ms);

            status = $"Upload concluido, {file.Size} bytes.s";

            imageData = $"data:image/jpg;base64,{Convert.ToBase64String(ms.ToArray())}";
        }

        registred = await classificationService.GetCassification(imageData);
        //registred = new Car
        //{
        //    Id = "77",
        //    CreateAt = DateTimeOffset.Now,
        //    Model = new Model
        //    {
        //        Name = "Fusquinha",
        //        Id = "77",
        //        CreateAt = DateTimeOffset.Now,
        //        Year = 2019,
        //        Manufacturer = new Manufacturer
        //        {
        //            CreateAt = DateTime.Now,
        //            Id = "77",
        //            Name = "Volks"
        //        },

        //    },
        //    Type = new Core.Models.Type
        //    {
        //        Id = "77",
        //        CreateAt = DateTimeOffset.Now,
        //        Name = "Sport"
        //    }
        //};
    }

    public async Task AlocateNewCar()
    {
        if (registred.Key.Model != null && registred.Key.Type != null)
        {
            var x = await parkingService.NewParkedAsync(registred.);

            if (x != null)
            {
                result = ("Veículo alocado na vaga: Nome: " + x.Name+" | Distância da porta: "+x.DistDoor);
            }
            else
            {
                result = "Erro ao realizar alocação do veículo.";
            }
        }
    }

}