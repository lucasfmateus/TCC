@page "/configuration"
@inject SlotController slotService
@inject CarController carService

<div class="row">
    @if (Loading == false)
    {
        <p><em>Loading...</em></p>}
    else
    {
        <div class="card">

            <h1>Nova Vaga</h1>

            <EditForm Model="@NewSlot" OnValidSubmit="@AddNewSlot">

                @*<p>
                    <label for="Id">Id</label>
                    <input type="text" bind="@NewSlot.Id" />
                </p>*@

                <p>
                    <label for="Name">Nome</label>
                    <input type="text" bind="@NewSlot.Name" />
                </p>


                <p>
                    <label for="DistDoor">Distância da Porta</label>
                    <input type="text" bind="@NewSlot.DistDoor" />
                </p>

                <p>
                    <label for="Type">Tipo</label>
                    <input type="text" bind="@NewSlot.Types" />
                </p>

                <button type="submit">Cadastrar</button>

            </EditForm>

            <h1>Novo Tipo</h1>

            <EditForm Model="@NewType" OnValidSubmit="@AddNewType">

                @*<p>
                    <label for="Id">Id</label>
                    <input type="text" @bind="NewType.Id" />
                </p>*@

                <p>
                    <label for="Name">Nome</label>
                    <input type="text" @bind="NewType.Name" />
                </p>

                <button type="submit">Cadastrar</button>

            </EditForm>

        </div>

        <div class="card">
            <h1>Cadatro de Carros</h1>

            @if (Loading == false)
            {
                <p><em>Loading...</em></p>}
            else
            {

                <div class="row" style="padding-top:10px">

                    <div class="col-md-4">

                        <select class="form-control" @onchange="ModelClicked">

                            <option value="">-- Modelo --</option>

                            @foreach (var m in models)
                            {
                                <option value="@m.Name">@m.Name</option>
                            }

                        </select>

                        <select class="form-control" @onchange="TypeClicked">

                            <option value="">-- Tipos --</option>

                            @foreach (var m in types)
                            {
                                <option value="@m.Name">@m.Name</option>
                            }

                        </select>

                        <button type="submit" @onclick="RegisterNewCar">Cadastrar</button>
                    </div>
                </div>
            }

            <h1>Cadatro de Modelo</h1>

            @if (Loading == false)
            {
                <p><em>Loading...</em></p>}
            else
            {
                @*<div class="row">
                    <div class="col-md-4">
                        <label class="control-label">Modelo</label>
                    </div>
                </div>*@

                <div class="row" style="padding-top:10px">

                    <div class="col-md-4">

                        <select class="form-control" @onchange="ManufacturerClicked">

                            <option value="">-- Fabricante --</option>

                            @foreach (var m in manufacturies)
                            {
                                <option value="@m.Name">@m.Name</option>
                            }

                        </select>

                        <p>
                            <label for="Year">Ano</label>
                            <input type="text" @bind="NewModel.Year" />
                        </p>

                        <p>
                            <label for="Name">Nome</label>
                            <input type="text" @bind="NewModel.Name" />
                        </p>

                        <button type="submit" @onclick="RegisterNewModel">Cadastrar</button>
                    </div>
                </div>
            }

            <h1>Cadatro de Fabricante</h1>

            @if (Loading == false)
            {
                <p><em>Loading...</em></p>}
            else
            {
                <div class="row" style="padding-top:10px">

                    <div class="col-md-4">

                        <p>
                            <label for="Name">Nome</label>
                            <input type="text" @bind="NewManufacturer.Name" />
                        </p>

                        <button type="submit" @onclick="RegisterNewManufacturer">Cadastrar</button>
                    </div>
                </div>
            }
        </div>
    }
</div>


@code{

    Slot NewSlot = new Slot();
    Core.Models.Type NewType = new Core.Models.Type();
    Car NewCar = new Car();
    Model NewModel = new Model();
    Manufacturer NewManufacturer = new Manufacturer();
    List<Manufacturer> manufacturies = new List<Manufacturer>();
    List<Model> models = new List<Model>();
    List<Core.Models.Type> types = new List<Core.Models.Type>();
    bool Loading = false;
    string modelName { get; set; }
    string typeName { get; set; }
    string manufacturerName { get; set; }

    bool collapseNavMenu = true;
    void ToggleNavMenu() { collapseNavMenu = !collapseNavMenu; }

    protected async Task AddNewSlot()
    {
        if (NewSlot.Name != null && NewSlot.Types! == null)
        {
            await slotService.NewSlotAsync(NewSlot);
        }
    }

    protected async Task AddNewType()
    {
        if (NewType.Name != null)
        {
            var x = await carService.NewTypeAsync(NewType);
            carService.client.DefaultRequestHeaders.Accept.Clear();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        manufacturies = await carService.GetAllManufacturesAsync();
        models = await carService.GetAllModelsAsync();
        types = await carService.GetAllTypesAsync();

        if (manufacturies != null && models != null && types != null)
        {
            Loading = true;
        }
    }

    void ModelClicked(ChangeEventArgs modelEvent)
    {
        modelName = modelEvent.Value.ToString();
        this.StateHasChanged();
    }

    void TypeClicked(ChangeEventArgs typeEvent)
    {
        typeName = typeEvent.Value.ToString();
        this.StateHasChanged();
    }

    void ManufacturerClicked(ChangeEventArgs manufacturerEvent)
    {
        manufacturerName = manufacturerEvent.Value.ToString();
        this.StateHasChanged();
    }

    public async Task RegisterNewCar()
    {
        NewCar.Model = await carService.GetModelByNameAsync(modelName);
        NewCar.Type = await carService.GetTypeByNameAsync(typeName);

        if (NewCar.Model != null && NewCar.Type != null)
        {
            var x = await carService.NewCarAsync(NewCar);
        }

        await Load();

    }

    public async Task RegisterNewModel()
    {
        if (NewModel.Name != null)
        {
            NewModel.Manufacturer = await carService.GetManufacturesByNameAsync(manufacturerName);
            var x = await carService.NewModelAsync(NewModel);
            NewModel = new Model();
        }

        await Load();
    }

    public async Task Load()
    {
        Loading = false;

        try
        {
            manufacturies = await carService.GetAllManufacturesAsync();
            models = await carService.GetAllModelsAsync();
            types = await carService.GetAllTypesAsync();

            if (manufacturies != null && models != null && types != null)
            {
                Loading = true;
            }

        }
        catch (Exception ex)
        {

        }


    }

    public async Task RegisterNewManufacturer()
    {
        if (NewManufacturer.Name != null)
        {
            var x = await carService.NewManufactureAsync(NewManufacturer);
        }
    }

}